(
$data_hip := content[dataset.executor="hip"];
$data_cuda := content[dataset.executor="cuda"];

$solvers := $data_cuda.solver~>$keys();

$matrices := [
"rajat31",
"atmosmodj",
"nlpkkt160",
"thermal2",
"CurlCurl_4",
"Bump_2911",
"Cube_Coup_dt0",
"StocF-1465",
"circuit5M",
"FullChip"];

$getColor := function($num_colors, $id) {
  "hsl(" & $floor(360 * $id / $num_colors) & ",40%,55%)"
};

$floor := $string ~> $substringBefore(?, '.') ~> $number;

$get_bandwidth := function($executor) {(
    $hip_bw := 809.753534;
    $cuda_bw := 812.617488;
    $executor = "hip" ? $hip_bw : $executor = "cuda" ? $cuda_bw : -1
)};

$memops := function($name, $n, $nnz, $it, $k, $vtype, $itype) {
  (
    $r := ($it%$k);
    $iter_r := ($floor($it/$k)*($k-1)*$k/2 + ($r-1)*$r/2);
    $bicgstab := (5*$n + 2*$nnz)*$vtype + 2*$nnz*$itype + $it/2*((29*$n + 4*$nnz)*$vtype + 4*$nnz*$itype)+ ((10*$n + 6)*$vtype + $it*((8*$n + 5)*$vtype));
    $cg := ((4*$n + 2*$nnz)*$vtype + 2*$nnz*$itype + $it*((15*$n + 2*$nnz)*$vtype + 2*$nnz*$itype)) + ((5*$n + 2)*$vtype + $it*((5 * $n + 2)*$vtype));
    $cgs := ((5*$n + 2*$nnz)*$vtype + 2*$nnz*$itype + $it/2*((20*$n + 4*$nnz)*$vtype + 4*$nnz*$itype) + ((10*$n + 2)*$vtype + $it*((10*$n + 3)*$vtype)));
    $fcg := ((4*$n + 2*$nnz)*$vtype + 2*$nnz*$itype + $it*((17*$n + 2*$nnz)*$vtype + 2*$nnz*$itype) + ((6*$n + 3)*$vtype + $it*((6*$n + 3)*$vtype)));
    $gmres_read := ((11 * $n + 2 * $nnz + 5/2 * $r + $n * $r + $r*$r/2 + 1) * $vtype + 2 * $nnz * $itype + $floor($it/$k) * ((1 + 5/2 * $k + 10 * $n + 2 * $nnz + $k*$k/2 + $k * $n) * $vtype + 2 * $nnz * $itype) + $it * ((7 * $n + 5 + 2 * $nnz) * $vtype + 2 * $nnz * $itype + 8) + ($iter_r) * ((4 * $n + 4) * $vtype));
    $gmres_write := ((6 * $n + $r + 2 * $k + 3) * $vtype + 8 + $floor($it/$k) * (($k + 6 * $n + 2) * $vtype + 8) + $it * ((4 * $n + 8) * $vtype + 8) + ($iter_r) * (($n + 2) * $vtype));
  ($name = "bicgstab" ? $bicgstab :
   $name = "cg" ? $cg :
   $name = "cgs" ? $cgs :
   $name = "fcg" ? $fcg :
   $name = "gmres"? ($gmres_read+$gmres_write) : -1000000000) / 1000000000
  )
};


$plot := $solvers~>$map(function($v, $i) {{
  "label": $v,
  "data": $data_cuda.{
      "x": problem.name,
      "y": $memops($v, problem.rows, problem.nonzeros, (solver~>$lookup($v)).apply.iterations, 100, 8, 4) / ((solver~>$lookup($v)).apply.time/1000000000)
    },
    "type": "scatter",
    "fill" : false,
    "showLine": false,
    "pointRadius": 5,
    "backgroundColor": $solvers~>$count()~>$getColor($i)
}});

$bw := $matrices~>$map(function($v, $i) {
   $get_bandwidth("cuda")
});

{
  "data": {
    "datasets":
      {
        "label": "STREAM TRIAD",
        "data": $bw,
        "backgroundColor": "rgba(0,0,0,1)",
        "borderColor": "rgba(0,0,0,1)",
        "type": "line",
        "fill": false,
        "showLine": true
      }~>$append($plot)
  },
  "options": {
    "legend": {
      "labels": {
        "fontSize": 20
      }
    },
    "title": {
      "display": true,
      "text": "Bandwidth of selected problems for Ginkgo solvers on V100(CUDA)",
      "fontSize": 20
    },
    "tooltips": {
      "mode": "index",
      "intersect": true
    },
    "scales": {
      "xAxes": [{
        "type": "category",
        "labels": $matrices,
        "ticks": {
          "autoSkip": false,
          "fontSize": 20
        },
        "scaleLabel": {
          "display": true,
          "labelString": "Problem",
          "fontSize": 20
        }
      }],
      "yAxes": [{
          "scaleLabel": {
            "display": true,
            "labelString": "Bandwidth (GB/s)",
            "fontSize": 20
          },
          "offset": true,
          "ticks": {
              "fontSize": 20,
              "beginAtZero" : true
          }
      }]
    }
  }
}
)
