#!/usr/bin/env python3


import json
import sys
from pathlib import PurePath


def main():
    if (len(sys.argv)) != 1:
        sys.stderr.write("Usage: {}\n".format(sys.argv[0]))
        sys.exit(1)
    properties = { 'file', 'problem', 'spmv', 'optimal', 'solver' }
    datasets = json.load(sys.stdin)
    matrix_set = set()
    system_set = set()
    for dataset in datasets:
        if dataset['file'] == 'agregate.json' or dataset['file'] == 'represent.json':
            continue
        parts = PurePath(dataset['file']).parts
        matrix_set.add(parts[3] + '/' + parts[4])
        system_set.add(parts[0] + '/' + parts[1] + '/' + parts[2])
    
    result = []
    for system in system_set:
        for matrix in matrix_set:
            filename = system + '/' + matrix
            parts = PurePath(filename).parts
            try:
                with open(filename, 'r') as f:
                    data = json.load(f)
                for item in data:
                    agregate = { k : item[k]
                        for k in item.keys() & properties }
                    agregate['dataset'] = {
                        'system': parts[0],
                        'executor': parts[1],
                        'provider': parts[2],
                        'collection': parts[3],
                        'problem': parts[4]
                    }
                    result.append(agregate)
            except:
                # Provide a empty element
                agregate = dict()
                agregate['dataset'] = {
                    'system': parts[0],
                    'executor': parts[1],
                    'provider': parts[2],
                    'collection': parts[3],
                    'problem': parts[4]
                }
                result.append(agregate)
    json.dump(result, sys.stdout)


if __name__ == "__main__":
    main()
